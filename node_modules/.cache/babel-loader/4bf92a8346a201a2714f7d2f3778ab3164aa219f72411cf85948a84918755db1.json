{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uCD5C\\uBCD1\\uD638\\\\Desktop\\\\gemggark\\\\gemggark-frontend\\\\src\\\\pages\\\\LoadingPage.js\",\n  _s = $RefreshSig$();\n// src/pages/LoadingPage.js (WebSocket 연동 및 실시간 진행률 표시)\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, LinearProgress } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingPage = ({\n  taskId,\n  setPageState,\n  setResultData\n}) => {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [message, setMessage] = useState('서버에 연결하는 중입니다...');\n  useEffect(() => {\n    if (!taskId) return;\n\n    // WebSocket 주소 (ws://는 http://와 같고, wss://는 https://와 같습니다)\n    const ws = new WebSocket(`ws://localhost:8000/ws/progress/${taskId}`);\n    ws.onopen = () => {\n      console.log('WebSocket 연결 성공');\n      setMessage('작업 상태를 기다리는 중입니다...');\n    };\n    ws.onmessage = event => {\n      const data = JSON.parse(event.data);\n      console.log('WebSocket 메시지 수신:', data);\n\n      // 서버에서 받은 데이터로 상태 업데이트\n      setProgress(data.progress || 0);\n      setMessage(data.message || '');\n\n      // 작업 완료 시\n      if (data.status === 'completed') {\n        setResultData(data.result);\n        setPageState('result');\n        ws.close();\n      }\n\n      // 작업 실패 시\n      if (data.status === 'failed') {\n        alert(`작업 실패: ${data.message}`);\n        setPageState('input');\n        ws.close();\n      }\n    };\n    ws.onclose = () => {\n      console.log('WebSocket 연결 종료');\n    };\n    ws.onerror = error => {\n      console.error('WebSocket 오류:', error);\n      alert('실시간 연결에 실패했습니다. 페이지를 새로고침 해주세요.');\n      setPageState('input');\n    };\n\n    // 컴포넌트가 언마운트될 때 WebSocket 연결을 정리합니다.\n    return () => {\n      if (ws.readyState === 1) {\n        // 연결된 상태일 때만\n        ws.close();\n      }\n    };\n  }, [taskId, setPageState, setResultData]); // taskId가 변경될 때만 이 effect를 실행\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '80%',\n      margin: 'auto',\n      textAlign: 'center',\n      padding: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        marginTop: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '100%',\n          mr: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(LinearProgress, {\n          variant: \"determinate\",\n          value: progress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          minWidth: 35\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: `${Math.round(progress)}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(LoadingPage, \"BqX2UvzcQfMqba5+3UyrGqvkpDQ=\");\n_c = LoadingPage;\nexport default LoadingPage;\nvar _c;\n$RefreshReg$(_c, \"LoadingPage\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","LinearProgress","jsxDEV","_jsxDEV","LoadingPage","taskId","setPageState","setResultData","_s","progress","setProgress","message","setMessage","ws","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","status","result","close","alert","onclose","onerror","error","readyState","sx","width","margin","textAlign","padding","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","display","alignItems","marginTop","mr","value","minWidth","color","Math","round","_c","$RefreshReg$"],"sources":["C:/Users/최병호/Desktop/gemggark/gemggark-frontend/src/pages/LoadingPage.js"],"sourcesContent":["// src/pages/LoadingPage.js (WebSocket 연동 및 실시간 진행률 표시)\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Box, Typography, LinearProgress } from '@mui/material';\r\n\r\nconst LoadingPage = ({ taskId, setPageState, setResultData }) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState('서버에 연결하는 중입니다...');\r\n\r\n  useEffect(() => {\r\n    if (!taskId) return;\r\n\r\n    // WebSocket 주소 (ws://는 http://와 같고, wss://는 https://와 같습니다)\r\n    const ws = new WebSocket(`ws://localhost:8000/ws/progress/${taskId}`);\r\n\r\n    ws.onopen = () => {\r\n      console.log('WebSocket 연결 성공');\r\n      setMessage('작업 상태를 기다리는 중입니다...');\r\n    };\r\n\r\n    ws.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      console.log('WebSocket 메시지 수신:', data);\r\n\r\n      // 서버에서 받은 데이터로 상태 업데이트\r\n      setProgress(data.progress || 0);\r\n      setMessage(data.message || '');\r\n\r\n      // 작업 완료 시\r\n      if (data.status === 'completed') {\r\n        setResultData(data.result);\r\n        setPageState('result');\r\n        ws.close();\r\n      }\r\n\r\n      // 작업 실패 시\r\n      if (data.status === 'failed') {\r\n        alert(`작업 실패: ${data.message}`);\r\n        setPageState('input');\r\n        ws.close();\r\n      }\r\n    };\r\n\r\n    ws.onclose = () => {\r\n      console.log('WebSocket 연결 종료');\r\n    };\r\n\r\n    ws.onerror = (error) => {\r\n      console.error('WebSocket 오류:', error);\r\n      alert('실시간 연결에 실패했습니다. 페이지를 새로고침 해주세요.');\r\n      setPageState('input');\r\n    };\r\n\r\n    // 컴포넌트가 언마운트될 때 WebSocket 연결을 정리합니다.\r\n    return () => {\r\n      if (ws.readyState === 1) { // 연결된 상태일 때만\r\n        ws.close();\r\n      }\r\n    };\r\n  }, [taskId, setPageState, setResultData]); // taskId가 변경될 때만 이 effect를 실행\r\n\r\n  return (\r\n    <Box sx={{ width: '80%', margin: 'auto', textAlign: 'center', padding: 4 }}>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        {message}\r\n      </Typography>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', marginTop: 2 }}>\r\n        <Box sx={{ width: '100%', mr: 1 }}>\r\n          <LinearProgress variant=\"determinate\" value={progress} />\r\n        </Box>\r\n        <Box sx={{ minWidth: 35 }}>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(progress)}%`}</Typography>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LoadingPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}