{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uCD5C\\uBCD1\\uD638\\\\Desktop\\\\gemggark\\\\gemggark-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport InputPage from './pages/InputPage';\nimport LoadingPage from './pages/LoadingPage';\nimport ResultPage from './pages/ResultPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // 'input', 'loading', 'result' 세 가지 상태를 관리합니다.\n  const [pageState, setPageState] = useState('input');\n  // 백엔드로부터 받은 결과 데이터를 저장합니다.\n  const [resultData, setResultData] = useState(null);\n\n  // 현재 페이지 상태에 따라 다른 컴포넌트를 보여줍니다.\n  const renderPage = () => {\n    switch (pageState) {\n      case 'loading':\n        return /*#__PURE__*/_jsxDEV(LoadingPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 16\n        }, this);\n      case 'result':\n        return /*#__PURE__*/_jsxDEV(ResultPage, {\n          data: resultData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 16\n        }, this);\n      case 'input':\n      default:\n        return /*#__PURE__*/_jsxDEV(InputPage, {\n          setPageState: setPageState,\n          setResultData: setResultData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gemggark: AI \\uC544\\uD06C\\uADF8\\uB9AC\\uB4DC \\uCD5C\\uC801\\uD654\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: renderPage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OF+eI7W5FasATXu6ujTaSzphkU8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InputPage","LoadingPage","ResultPage","jsxDEV","_jsxDEV","App","_s","pageState","setPageState","resultData","setResultData","renderPage","fileName","_jsxFileName","lineNumber","columnNumber","data","className","children","_c","$RefreshReg$"],"sources":["C:/Users/최병호/Desktop/gemggark/gemggark-frontend/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport InputPage from './pages/InputPage';\nimport LoadingPage from './pages/LoadingPage';\nimport ResultPage from './pages/ResultPage';\n\nfunction App() {\n  // 'input', 'loading', 'result' 세 가지 상태를 관리합니다.\n  const [pageState, setPageState] = useState('input');\n  // 백엔드로부터 받은 결과 데이터를 저장합니다.\n  const [resultData, setResultData] = useState(null);\n\n  // 현재 페이지 상태에 따라 다른 컴포넌트를 보여줍니다.\n  const renderPage = () => {\n    switch (pageState) {\n      case 'loading':\n        return <LoadingPage />;\n      case 'result':\n        return <ResultPage data={resultData} />;\n      case 'input':\n      default:\n        return <InputPage setPageState={setPageState} setResultData={setResultData} />;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Gemggark: AI 아크그리드 최적화</h1>\n      </header>\n      <main>\n        {renderPage()}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,WAAW,MAAM,qBAAqB;AAC7C,OAAOC,UAAU,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,OAAO,CAAC;EACnD;EACA,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAElD;EACA,MAAMY,UAAU,GAAGA,CAAA,KAAM;IACvB,QAAQJ,SAAS;MACf,KAAK,SAAS;QACZ,oBAAOH,OAAA,CAACH,WAAW;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MACxB,KAAK,QAAQ;QACX,oBAAOX,OAAA,CAACF,UAAU;UAACc,IAAI,EAAEP;QAAW;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MACzC,KAAK,OAAO;MACZ;QACE,oBAAOX,OAAA,CAACJ,SAAS;UAACQ,YAAY,EAAEA,YAAa;UAACE,aAAa,EAAEA;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;IAClF;EACF,CAAC;EAED,oBACEX,OAAA;IAAKa,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBd,OAAA;MAAQa,SAAS,EAAC,YAAY;MAAAC,QAAA,eAC5Bd,OAAA;QAAAc,QAAA,EAAI;MAAsB;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eACTX,OAAA;MAAAc,QAAA,EACGP,UAAU,CAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACT,EAAA,CA7BQD,GAAG;AAAAc,EAAA,GAAHd,GAAG;AA+BZ,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}